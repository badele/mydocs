{
    "docs": [
        {
            "location": "/", 
            "text": "My Documentations\n\uf0c1\n\n\nHere all my all tips for the computer domain, For now, there are two sections\n\n\n\n\nSystem section\n ( Linux, Shell, Virtualisation, ... ) \n\n\nDevelopment section\n ( Python, Git, ... )", 
            "title": "Main"
        }, 
        {
            "location": "/#my-documentations", 
            "text": "Here all my all tips for the computer domain, For now, there are two sections   System section  ( Linux, Shell, Virtualisation, ... )   Development section  ( Python, Git, ... )", 
            "title": "My Documentations"
        }, 
        {
            "location": "/system/", 
            "text": "System\n\uf0c1\n\n\nProxmox / OpenVZ\n\uf0c1\n\n\nsysctl\n\uf0c1\n\n\nIf you receive this message \nsysctl: permission denied on key 'xxx.xxx.xxx'\n in your openvz container. You cannot change the sysctl options in the openvz container, for that, you can set this options in the host hypervisor. \n\n\n# In the hypervisor\nnano /etc/sysctl.conf\n#xxx.xxx.xxx=somevalue\n#\nsysctl -p\n\n\n\n\nSalt\n\uf0c1\n\n\n\n\nDiagnose\n\n\nDebug the salt minion \nsalt-minion -l debug\n\n\n\n\nUnbound\n\uf0c1\n\n\n\n\nDiagnose\n\n\nCheck the unbound configuration with \nunbound-checkconf\n\n\n\n\nCollectd\n\uf0c1\n\n\n\n\nDiagnose\n\n\nCheck collectd config \ncollectd -t\n\n\nCheck collecd plugins \ncollectd -T\n\n\nCheck collecd in foreground mode \ncollectd -f\n\n\n\n\nOh My Zsh\n\uf0c1\n\n\n\n\nDisable git status in prompt\n\n\nSome project have many files, and \nOh My Zsh\n is slow for respond, For some project, you can disable git prompt feature. Go to your git project and type this command\n\n\ngit config --add oh-my-zsh.hide-status 1", 
            "title": "System"
        }, 
        {
            "location": "/system/#system", 
            "text": "", 
            "title": "System"
        }, 
        {
            "location": "/system/#proxmox-openvz", 
            "text": "sysctl \uf0c1  If you receive this message  sysctl: permission denied on key 'xxx.xxx.xxx'  in your openvz container. You cannot change the sysctl options in the openvz container, for that, you can set this options in the host hypervisor.   # In the hypervisor\nnano /etc/sysctl.conf\n#xxx.xxx.xxx=somevalue\n#\nsysctl -p", 
            "title": "Proxmox / OpenVZ"
        }, 
        {
            "location": "/system/#salt", 
            "text": "Diagnose  Debug the salt minion  salt-minion -l debug", 
            "title": "Salt"
        }, 
        {
            "location": "/system/#unbound", 
            "text": "Diagnose  Check the unbound configuration with  unbound-checkconf", 
            "title": "Unbound"
        }, 
        {
            "location": "/system/#collectd", 
            "text": "Diagnose  Check collectd config  collectd -t  Check collecd plugins  collectd -T  Check collecd in foreground mode  collectd -f", 
            "title": "Collectd"
        }, 
        {
            "location": "/system/#oh-my-zsh", 
            "text": "Disable git status in prompt  Some project have many files, and  Oh My Zsh  is slow for respond, For some project, you can disable git prompt feature. Go to your git project and type this command  git config --add oh-my-zsh.hide-status 1", 
            "title": "Oh My Zsh"
        }, 
        {
            "location": "/development/", 
            "text": "Developement\n\uf0c1\n\n\nGit\n\uf0c1\n\n\nCommit\n\uf0c1\n\n\nCancel commit\n\uf0c1\n\n\ngit reset HEAD~1\n\n\n\nDelete files\n\uf0c1\n\n\nValid deleted file with rm\n\uf0c1\n\n\ngit ls-files --deleted -z | xargs -0 git rm\n\n\n\nDelete file from Git repository\n\uf0c1\n\n\ngit reset HEAD filename/directoryname\n\n\n\nBranchs\n\uf0c1\n\n\nReset branch\n\uf0c1\n\n\ngit checkout mybranch\ngit reset --hard origin/mybranch\n\n\n\nDelete local branch\n\uf0c1\n\n\ngit branch -d the_local_branch\ngit branch -D the_local_branch # Force\n\n\n\nDelete remote branch\n\uf0c1\n\n\ngit push origin :the_remote_branch\n\n\n\nRename branch or move branch\n\uf0c1\n\n\ngit branch -m oldbranch newbranch\n\n\n\nCommit\n\uf0c1\n\n\nConfiguration\n\uf0c1\n\n\nDisplay log commit\n\uf0c1\n\n\nIn you git \n.gitconfig\n\n\n# In .gitconfig\n[alias]\nlg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all\nlg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all\nlg = !\"git lg1\"\n\n\n\nRebase by default when doing git pull\n\uf0c1\n\n\ngit config --global pull.rebase true\n\n\n\nGithub\n\uf0c1\n\n\nReset Github fork\n\uf0c1\n\n\n#http://scribu.net/blog/resetting-your-github-fork.html\ngit remote add upstream git://github.com/wp-cli/wp-cli.git\ngit fetch upstream\ngit branch backup\ngit checkout upstream/master -B master\ngit push --force\n\n\n\nMkdocs \n Github\n\uf0c1\n\n\nInstallation\n\uf0c1\n\n\npip install mkdocs\n\n\n\nConfiguration\n\uf0c1\n\n\nCreate documentation project with\n\n\nmkdocs new mydocs\n\n\n\nYou can see the result in the mydocs folder\n\n\n|-- mydocs              # Root mkdocs directory\n    |-- index.md        # File documentation\n|-- mkdocs.yml          # config file\n\n\n\nEdit you \nmkdocs.yml\n    \n\n\npages:\n- 'index.md'\n\n\n\n\nEdit the \nindex.md\n document with markdown syntax.\n\n\nNow you can see your modification with \nmkdocs serve\n http://localhost:8000\n\n\nDeploy to github\n\uf0c1\n\n\nPrepare Github project (First time)\n\uf0c1\n\n\ngit clone github.com/user/repository.git\ncd repository\nmkdocs gh-deploy --clean\n\n\n\nPush the documentation\n\uf0c1\n\n\nAfter updated your documentation, you can push to github\n\n\nmkdocs gh-deploy", 
            "title": "Development"
        }, 
        {
            "location": "/development/#developement", 
            "text": "", 
            "title": "Developement"
        }, 
        {
            "location": "/development/#git", 
            "text": "Commit \uf0c1  Cancel commit \uf0c1  git reset HEAD~1  Delete files \uf0c1  Valid deleted file with rm \uf0c1  git ls-files --deleted -z | xargs -0 git rm  Delete file from Git repository \uf0c1  git reset HEAD filename/directoryname  Branchs \uf0c1  Reset branch \uf0c1  git checkout mybranch\ngit reset --hard origin/mybranch  Delete local branch \uf0c1  git branch -d the_local_branch\ngit branch -D the_local_branch # Force  Delete remote branch \uf0c1  git push origin :the_remote_branch  Rename branch or move branch \uf0c1  git branch -m oldbranch newbranch  Commit \uf0c1  Configuration \uf0c1  Display log commit \uf0c1  In you git  .gitconfig  # In .gitconfig\n[alias]\nlg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all\nlg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all\nlg = !\"git lg1\"  Rebase by default when doing git pull \uf0c1  git config --global pull.rebase true", 
            "title": "Git"
        }, 
        {
            "location": "/development/#github", 
            "text": "Reset Github fork \uf0c1  #http://scribu.net/blog/resetting-your-github-fork.html\ngit remote add upstream git://github.com/wp-cli/wp-cli.git\ngit fetch upstream\ngit branch backup\ngit checkout upstream/master -B master\ngit push --force", 
            "title": "Github"
        }, 
        {
            "location": "/development/#mkdocs-github", 
            "text": "Installation \uf0c1  pip install mkdocs  Configuration \uf0c1  Create documentation project with  mkdocs new mydocs  You can see the result in the mydocs folder  |-- mydocs              # Root mkdocs directory\n    |-- index.md        # File documentation\n|-- mkdocs.yml          # config file  Edit you  mkdocs.yml       pages:\n- 'index.md'  Edit the  index.md  document with markdown syntax.  Now you can see your modification with  mkdocs serve  http://localhost:8000  Deploy to github \uf0c1  Prepare Github project (First time) \uf0c1  git clone github.com/user/repository.git\ncd repository\nmkdocs gh-deploy --clean  Push the documentation \uf0c1  After updated your documentation, you can push to github  mkdocs gh-deploy", 
            "title": "Mkdocs &amp; Github"
        }
    ]
}